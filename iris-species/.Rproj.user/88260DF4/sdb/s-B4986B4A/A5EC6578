{
    "collab_server" : "",
    "contents" : "# This a practice tutorial for getting started in R. \n# I have combined two practices I found online in order \n# to get a better sense of different ways to load, look at, clean, summarize, test, \n# and visualize data, building models, evaluating algorithms and making predictions. \n\n\n# Check working directory \n# Install any packages you need to use i.e. \"caret\"\n# Load the package\n\n# Load raw data from CSV file\n\n# Define the file name, don't forget the \"\"\nfilename <- \"iris.csv\"\n\n# Load CSV file from local directory\niris_dataset <- read.csv(filename, header = TRUE)\n\n# Set the header euqal to \"TRUE\" if you do not want to edit column names\n# Otherwise, set column names\n# The online example says to rename the columns however, I ran into trouble \n# when having to take out \"Species\" as a level b/c the original header got \n# bumped to row 1. After a googling different ways to remove that row,\n# I was still left with 4 levels of species. So I decided to keep the\n# header equal to TRUE instead of FALSE\n# =========================================\n# Below is what the tutorial tells you to do next but I skipped and continued\n# to next steps:\n\n#  colnames(iris_dataset) <- c(\"ID\", \"Sepal.Length\",\"Sepal.Width\",\"Petal.Length\",\"Petal.Width\",\"Species\")\n\n# ==========================================\n\n# The dataset contains 150 observations of iris flowers. \n# There are four columns of measurements of the flowers in centimeters. \n# The fifth column is the species of the flower observed. \n# All observed flowers belong to one of three species.\n\n\n# Create a list of 80% of the rows in the original dataset we can use for training\nvalidation_index <- createDataPartition(iris_dataset$Species, p=0.80, list=FALSE)\n# Select 20% of the data for validation\nvalidation <- iris_dataset[-validation_index,]\n# Use the remaining 80% of data to training and testing the models\niris_dataset <- iris_dataset[validation_index,]\n\n# Now we have training data in the \"iris_dataset\" variable\n# And a validation (test) set we will use in the validation variable\n\n# Summarizing the dataset in 6 ways\n\n# 1 Dimensions of the dataset (looking at # of rows and columns)\ndim(iris_dataset)\n\n# 2 Types of attributes (listing the types of attributes, what are we working with?)\nsapply(iris_dataset, class)\nlapply(iris_dataset, class)\n\n# 3 Peek at the data (take a peek at the first 5 rows of data)\nhead(iris_dataset)\n\n# 4 Levels of the class  (listing levels for the class)\nlevels(iris_dataset$Species)\n\n# Now you can see why this is called a multi-class classifcation problem\n\n# 5 Class distribution (summarize the class distribution). \n# View it as an absolute count or a percentage\npercentage <- prop.table(table(iris_dataset$Species)) * 100\ncbind(freq=table(iris_dataset$Species), percentage=percentage)\n\n# 6 Statiscal summary (mean, max, min, percentiles)\nsummary(iris_dataset)\n\n# Ok, now we will visualize the data set\n# Let's start with univarible attributes to understand each attribute\n\n# Univarite plots\n# split input (x) and output (y)\nx <- iris_dataset[,1:4]\ny <- iris_dataset[,5]\n\n# boxplot for each attribute on one image\npar(mfrow=c(1,4))\nfor(i in 1:4) {\n  boxplot(x[,i], main=names(iris)[i])\n}\n\n# barplot for class breakdown\nplot(y)\n\n# Multivariate plots\n# Scatterplot matrix\nfeaturePlot(x=x, y=y, plot=\"ellipse\")\n\n# box and whisker plots for each attribute\nfeaturePlot(x=x, y=y, plot=\"box\")\n\n\n# density plots for each attribute by class value\nscales <- list(x=list(relation=\"free\"), y=list(relation=\"free\"))\nfeaturePlot(x=x, y=y, plot=\"density\", scales=scales)\n\n# Evaluate Algorithms\n# 1 Test Harness\n\n# We will 10-fold crossvalidation to estimate accuracy.\n# This will split our dataset into 10 parts, train in 9 and test on 1 \n# and release for all combinations of train-test splits. We will also \n# repeat the process 3 times for each algorithm with different splits of \n# the data into 10 groups, in an effort to get a more accurate estimate.\n\n# Run algorithms using 10-fold cross validation\ncontrol <- trainControl(method=\"cv\", number=10)\nmetric <- \"Accuracy\"\n\n# 2 Build models\n# Letâ€™s evaluate 5 different algorithms:\n  \n# Linear Discriminant Analysis (LDA)\n# Classification and Regression Trees (CART).\n# k-Nearest Neighbors (kNN).\n# Support Vector Machines (SVM) with a linear kernel.\n# Random Forest (RF)\n\n# a) linear algorithms\nset.seed(7)\nfit.lda <- train(Species~., data=iris_dataset, method=\"lda\", metric=metric, trControl=control)\n# b) nonlinear algorithms\n# CART\nset.seed(7)\nfit.cart <- train(Species~., data=iris_dataset, method=\"rpart\", metric=metric, trControl=control)\n# kNN\nset.seed(7)\nfit.knn <- train(Species~., data=iris_dataset, method=\"knn\", metric=metric, trControl=control)\n# c) advanced algorithms\n# SVM\nset.seed(7)\nfit.svm <- train(Species~., data=iris_dataset, method=\"svmRadial\", metric=metric, trControl=control)\n# Random Forest\n\n# Select the best model. \n# We need to compare the models and pick the most accurate one\n\n# summarize accuracy of models\nresults <- resamples(list(lda=fit.lda, cart=fit.cart, knn=fit.knn, svm=fit.svm, rf=fit.rf))\nsummary(results)\n\n# We can also create a plot of the model evaluation results and \n# compare the spread and the mean accuracy of each model. There \n# is a population of accuracy measures for each algorithm because \n# each algorithm was evaluated 10 times (10 fold cross validation).\n\n# compare accuracy of models\ndotplot(results)\n\n# rf and lda are not plotted howver, from the results we can see \n# that they are most accurate.\n\n# summarize Best Model\nprint(fit.lda)\nprint(fit.rf)\n\n# This gives a nice summary of what was used to train the model and \n# the mean and standard deviation (SD) accuracy achieved, \n# specifically 97.5% accuracy +/- 4%\n\n## THIS IS TRUE FOR THE ONLINE TUTORIAL HOWEVER, MY NUMBERS CAME OUT A LITTLE DIFFERENT\n\n# Make preditions\n\n\n# estimate skill of LDA on the validation dataset\npredictions <- predict(fit.lda, validation)\nconfusionMatrix(predictions, validation$Species)\n\n################### END OF PART 1 TUTORIAL ################## \n\n\n  \n",
    "created" : 1478742054318.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2751518337",
    "id" : "A5EC6578",
    "lastKnownWriteTime" : 1478742064,
    "last_content_update" : 1478742064703,
    "path" : "~/Desktop/Iris Data/iris-species/iris-species.R",
    "project_path" : "iris-species.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}